name: Run CI

on:
  workflow_call:
    inputs:
      runtime_version:
        description: 'The default Java runtime version to run builds on'
        required: false
        type: number
        default: 11
      publishing_branch_regex:
        description: 'The regular expression to determine if a certain branch build should be published'
        required: false
        type: string
        default: '(?:(?:(?:main\/)?(\d+(?:\.\d+)*(?:\.x)?)))|master|main|trunk'
      extra_gradle_params:
        description: 'Extra arguments to pass to all Gradle invocations'
        required: false
        type: string
        default: ''
      extra_gradle_publish_params:
        description: 'Extra arguments to pass to the Gradle invocation that publishes this project'
        required: false
        type: string
        default: ''
      gradle_warning_mode:
        description: 'Warning mode to set on Gradle executions'
        required: false
        type: string
        default: 'fail'
    secrets:
      SONATYPE_USERNAME:
        description: 'vectrix.space OSSRH Username'
        required: false
      SONATYPE_PASSWORD:
        description: 'vectrix.space OSSRH Password'
        required: false

concurrency:
  group: "${{ github.workflow }}-${{ github.event.number || github.ref }}"
  cancel-in-progress: true

permissions:
  actions: "write"
  contents: "read"

jobs:
  build:
    # Only run on PRs if the source branch is on someone else's repo
    if: "${{ github.event_name != 'pull_request' || github.repository != github.event.pull_request.head.repo.full_name }}"
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest"]
    runs-on: "${{ matrix.os }}"
    steps:
    - name: "checkout repository"
      uses: "actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683" # v4
      with:
        fetch-depth: 0
        submodules: true
    - name: "setup jdk ${{ inputs.runtime_version }}"
      uses: "actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00" # v4
      with:
        distribution: "temurin"
        java-version: "${{ inputs.runtime_version }}"
    - name: "validate gradle wrapper"
      uses: "gradle/wrapper-validation-action@f9c9c575b8b21b6485636a91ffecd10e558c62f6" # v3
    - name: "check branch for publish"
      # Checks branch name to see if we're going to potentially publish this
      uses: "KyoriPowered/action-regex-match@1ff8ef914f6762fff8d5efd8d56ef88b5be5dd5c" # v4
      id: "branch-name"
      with:
        text: "${{ github.ref }}"
        regex: "^refs/heads/(?:${{ inputs.publishing_branch_regex }})$" # master or something like 0.8.x or 2.x
    - name: "setup gradle properties"
      env:
        WARNING_MODE: "${{ inputs.gradle_warning_mode }}"
      shell: bash
      run: |
        mkdir -p $HOME/.gradle/
        echo "org.gradle.warning.mode=$WARNING_MODE" >> $HOME/.gradle/gradle.properties
    - name: "run gradle build"
      uses: "gradle/gradle-build-action@ac2d340dc04d9e1113182899e983b5400c17cda1" # v3
      with:
        cache-read-only: "${{ steps.branch-name.outputs.match == '' || github.event_name == 'pull_request' }}"
        arguments: " ${{ inputs.extra_gradle_params }} build"
    - name: "Archive test results"
      if: "${{ always() }}"
      uses: "actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02" # v4
      with:
        name: "${{ runner.os }}-test-results"
        path: |
          build/reports/
          */build/reports/
    - name: Determine status
      if: "${{ runner.os == 'Linux' }}"
      run: |
        if [ "$(./gradlew properties | awk '/^version:/ { print $2; }' | grep '\-SNAPSHOT')" ]; then
          echo "STATUS=snapshot" >> $GITHUB_ENV
        else
          echo "STATUS=release" >> $GITHUB_ENV
        fi
    - name: "publish"
      if: "${{ runner.os == 'Linux' && env.STATUS != 'release' && github.event_name == 'push' && steps.branch-name.outputs.match != '' }}"
      run: "./gradlew ${{ inputs.extra_gradle_params }} publish ${{ inputs.extra_gradle_publish_params }}"
      env:
        ORG_GRADLE_PROJECT_sonatypeUsername: "${{ secrets.SONATYPE_USERNAME }}"
        ORG_GRADLE_PROJECT_sonatypePassword: "${{ secrets.SONATYPE_PASSWORD }}"
